#!/bin/bash

FUNCTION_CALL=$1
ARG1=$2
ARG2=$3
ARG3=$4
ARG4=$5

# Makes a cleaner looking result in the terminal
echo ""

######################################################################
#                    Purencool Script Tools                          #
######################################################################

# colors used
NC="\033[0m"        # no color
BLACK='\033[0;30m'  # Black
RED='\033[0;31m'    # Red
GREEN='\033[0;32m'  # Green
YELLOW='\033[0;33m' # Yellow
BLUE='\033[0;34m'   # Blue
WHITE='\033[0;37m'  # White

VERSION="0.10.4"
RELEASE_NOTES="Added PS starting functionality"
REQUEST_URL="https://raw.githubusercontent.com/purencool/studio/main/purencoolstudio"
PNC_FILENAME=$(dirname "$0")"/purencoolstudio"
TEMP_FILE_NAME=$(dirname "$0")"/purencoolstudio.tmp"

STUDIO_UI="purencool/purencool_studio_system:latest"
STUDIO_SYSTEM="purencool/purencool_studio:latest"
BASE_IDE="theiaide/theia-php:latest"

### information
#
###
function information() {
    echo "VERSION: $VERSION"
    echo "$RELEASE_NOTES"
}

### install
# Automates the installation of Studio
###
function install() {
    OS_MACHINE=$(machineOS)
    echo $OS_MACHINE
    sudo mv $PNC_FILENAME /usr/local/bin/purencoolstudio
    sudo chmod 755 /usr/local/bin/purencoolstudio
    echo $(information)
}

### MachineOS
#
###
function machineOS() {
    unameOut="$(uname -s)"
    case "${unameOut}" in
    Linux*) machine=Linux ;;
    Darwin*) machine=Mac ;;
    CYGWIN*) machine=Cygwin ;;
    MINGW*) machine=MinGw ;;
    *) machine="UNKNOWN:${unameOut}" ;;
    esac
    echo ${machine}
}

### Update
# Self updates the Studio global script
##
function update() {
    echo "Starting self update"
    if [ -n "$(which wget)" ]; then
        $(wget -O $TEMP_FILE_NAME $REQUEST_URL >/dev/null 2>&1)
        mv "$TEMP_FILE_NAME" "$PNC_FILENAME"
        rm -f "$TEMP_FILE_NAME"
        chmod 755 "$PNC_FILENAME"
        echo $(information)
    fi
}

### Version
# Testing to see if there is a newer Studio version
###
function version() {
    THIS_VERSION=$(grep -m 1 VERSION $PNC_FILENAME)
    $(wget -O $TEMP_FILE_NAME $REQUEST_URL >/dev/null 2>&1)
    NEW_VERSION=$(grep -m 1 VERSION $TEMP_FILE_NAME)
    rm $TEMP_FILE_NAME
    echo -e "The latest version is$YELLOW $NEW_VERSION$NC, and your currently using$YELLOW $THIS_VERSION$NC"
}

######################################################################
#                    Purencool Tools                                 #
######################################################################

### listCurrentDomains()
#  List all the domains being managed by the system.
###
function listCurrentDomains() {
    local DOMAINS_ONLY=$1
    local VAR_BASE_PATH=$(getConfig base_path)
    if [ "$DOMAINS_ONLY" == "-p" ]; then
        local paths=($(find $VAR_BASE_PATH"/sites" -maxdepth 1 -type d))
        echo ${paths[*]:1}
    else
        local paths=($(ls $VAR_BASE_PATH"/sites"))
        echo ${paths[*]}
    fi
}

### listPortNumbers
#  List all the port numbers being used.
###
function listPortNumbers() {
    docker ps --format '{{.Ports}}' | sed 's/^0.0.0.0://' | cut -c1-4
}

### GetConfig
# Gets Purencool Studios Global config
###
function getConfig() {
    local configRequestStr="$1"
    [[ -z $configRequestStr ]] && {
        echo "${FUNCNAME}(): config request variable not specified"
        exit 1
    }
    sed -e 's#.*::\(\)#\1#' <<<"$(grep "^$configRequestStr" ${HOME}/purencool_studio/.config/config)"
}

### DockerInstalled
# Test to see if docker is installed
#
###
function dockerInstalled() {
    if echo "$(docker -v)" | grep -q "version"; then
        echo "true"
    else
        echo "false"
    fi
}

######################################################################
#                    Purencool User Tools                            #
######################################################################

### help
# To use the Help follow the example below
#
# @command
# 1.  <purencoolstudio help> to see everything
# 2.  <purencoolstudio help <title eg, Help >> to see item
#
function help() {
    local VAR_ARR=$(sed -e "/### $1/,/##/!d" $PNC_FILENAME)
    echo -e "$YELLOW$VAR_ARR$NC"
}
##

### installStudio
# Installs Purencool Studio
#
##
function installStudio() {
    echo "Current path: "$(pwd)
    dockerDi=$(dockerInstalled)
    if [ "$dockerDi" = 'true' ]; then
        echo "In order to run this container you'll need docker installed."
        echo -e "$RED""Purencool Studio won't be installed until docker is installed $NC"
        echo "  1. https://docs.docker.com/windows/started"
        echo "  2. https://docs.docker.com/mac/started/"
        echo "  3. https://docs.docker.com/windows/started"
        exit
    fi

    read -p "Select a path or use "$HOME"/purencool_studio/sites for app storage: " pathToBeUsed

    mkdir "${HOME}/purencool_studio"
    mkdir "${HOME}/purencool_studio/.system"
    mkdir "${HOME}/purencool_studio/.system/history"
    mkdir "${HOME}/purencool_studio/.system/history/purencool_studio"
    mkdir "${HOME}/purencool_studio/.system/history/purencool_studio_ide"
    mkdir "${HOME}/purencool_studio/.system/purencool_studio"
    mkdir "${HOME}/purencool_studio/.system/purencool_studio_system"
    mkdir "${HOME}/purencool_studio/.config"
    touch "${HOME}/purencool_studio/.config/config"
    echo "ide_port::3001" >>${HOME}/purencool_studio/.config/config
    echo "studio_port::7000" >>${HOME}/purencool_studio/.config/config
    echo "system_port::7001" >>${HOME}/purencool_studio/.config/config

    if [ -z "$pathToBeUsed" ]; then
        echo "base_path::"${HOME}/purencool_studio >>${HOME}/purencool_studio/.config/config
        echo "A directory was created in: "${HOME}"/purencool_studio"
        mkdir "${HOME}/purencool_studio/sites"
    else
        echo "base_path::"$pathToBeUsed >>${HOME}/purencool_studio/.config/config
        mkdir "$pathToBeUsed"
        mkdir "$pathToBeUsed""/sites"
        echo "A directory was created in: $pathToBeUsed"
    fi

    docker pull $STUDIO_UI
    docker pull $STUDIO_SYSTEM
    docker pull $BASE_IDE
    echo "Purencool Studio software has been installed"
}

### uninstallStudio
# Uninstalls Purencool Studio except the sites directory
#
##
function uninstallStudio() {
    rm -Rf "${HOME}/purencool_studio/.system"
    rn -Rf "${HOME}/purencool_studio/.config"
    $(removeStudio)
}

### ide
# Creat a new IDE.
#
# @command <ide>
#
##
function ide() {

    if [ -z "$1" ]; then
        VAR_BASE_PATH=$(getConfig base_path)
    else
        VAR_BASE_PATH=$1
    fi

    if [ -z "$2" ]; then
        VAR_IDE_PORT=$(getConfig ide_port)
    else
        VAR_IDE_PORT=$2
    fi

    if [ -z "$3" ]; then
        VAR_IDE_NAME="purencool_studio_ide_"$((RANDOM % 40))
    else
        VAR_IDE_NAME=$3
    fi

    if [ -z "$4" ]; then
        VAR_IDE_TYPE=$BASE_IDE
    else
        VAR_IDE_TYPE=$4
    fi

    docker run -it -d -p $VAR_IDE_PORT:3000 --name=$VAR_IDE_NAME -v "$VAR_BASE_PATH:/home/project:cached" $VAR_IDE_TYPE
    echo "http://localhost:$VAR_IDE_PORT"
}

### removeIde
# Remove  IDE.
#
# @command <removeIde>
#
##
function removeIde() {

    if [ -z "$1" ]; then
        docker stop $1
        docker rm $1
    else
        docker stop $(docker ps -a -q)
        docker rm $(docker ps -a -q)
    fi
}

### runStudio
# Run the Studio images.
#
# @command <runStudio>
#
##
function runStudio() {
    VAR_STUDIO_PORT=$(getConfig studio_port)
    docker run --name=purencool_studio -d -p $VAR_STUDIO_PORT:3000 -t purencool/purencool_studio:latest
    docker ps -f name=purencool_studio | grep -w purencool_studio

    VAR_SYSTEM_PORT=$(getConfig system_port)
    docker run --name=purencool_studio_system -d -p $VAR_SYSTEM_PORT:3000 -t purencool/purencool_studio_system:latest
    docker ps -f name=purencool_studio_system | grep -w purencool_studio_system
}

### removeStudio
# Remove the Studio images.
#
# @command <removeStudio>
#
##
function removeStudio() {
    $(stopStudio)
    docker rm purencool_studio
    docker rm purencool_studio_system
    docker rmi -f $STUDIO_UI
    docker rmi -f $STUDIO_SYSTEM
}

### stopStudio
# Stop the Studio images.
#
# @command <stopStudio>
#
##
function removeStudio() {
    docker stop $STUDIO_UI
    docker stop $STUDIO_SYSTEM
}

### startStudio
# Start the Studio images.
#
# @command <startStudio>
#
##
function startStudio() {
    docker start $STUDIO_UI
    docker start $STUDIO_SYSTEM
}

######################################################################
#                    Purencool create site                           #
######################################################################

### domainsExist
# Displays all installed domains on the system or searches for a single
# domain
#
# command
#        <domainsExist>
# flags
#       <all> Display all domains on the system
#
# echo
#     1. All domains with complete paths
#     2. Returns domain if it exists
#     3. Domain exits
##
function domainsExist() {
    local FIND_DOMAIN=$1
    local DOMAIN_EXISTS='false'
    if [ "$FIND_DOMAIN" == "all" ]; then
        arr=($(listCurrentDomains -p))
        for paths in ${arr[@]}; do
            echo "$paths"
        done
    else
        arr=($(listCurrentDomains))
        for paths in ${arr[@]}; do
            if [ "$FIND_DOMAIN" == "$paths" ]; then
                DOMAIN_EXISTS=$paths
                break
            fi
        done
        echo $DOMAIN_EXISTS
    fi
}

### createSite
# createSite creates the configuration for the site
#
# command <createSite>
##
function createSite() {
    while true; do
        read -p 'Create a new site? yes/no: ' input
        case $input in
        [yY]*)
            echo 'Continuing'
            break
            ;;
        [nN]*)
            echo 'Ok, exiting'
            exit 1
            ;;
        *)
            echo 'Invalid input' >&2
            ;;
        esac
    done
    #domain
    while true; do
        read -p 'What is the site called(example.local)?: ' input
        case $input in
        [yY]*)
            echo 'Continuing'
            break
            ;;
        *)
            echo 'Invalid input' >&2
            ;;
        esac
    done

    #language
    #version

    #services

    #framework

    #type

    #package manager

    #ide

    #docker image

}

###
# Calling functions
###
case $FUNCTION_CALL in
dockerInstalled) "$@" ;;
domainsExist) domainsExist $ARG1 ;;
createSite) "$@" ;;
getConfig) "$@" ;;
help) help $ARG1 ;;
information) "$@" ;;
install) "$@" ;;
installStudio) "$@" ;;
listCurrentDomains) listCurrentDomains $ARG1 ;;
listPortNumbers) "$@" ;;
update) "$@" ;;
version) "$@" ;;
ide) ide $ARG1 $ARG2 $ARG3 $ARG4 ;;
removeIde) removeIde $ARG1 ;;
runStudio) "$@" ;;
removeStudio) "$@" ;;
stopStudio) "$@" ;;
startStudio) "$@" ;;
uninstallStudio) "$@" ;;
esac

# Makes a cleaner looking result in the terminal
echo ""

### Commands
#  The list below are functions that can be used to help manage Purencool Studio
#  from the commandline. To use the command type <purencoolstudio help <title eg, Help >>
#
#   domainsExist
#   help
#   installStudio
#   ide
#   removeIde
#   runStudio
#   stopStudio
#   startStudio
#   uninstallStudio
#   update
#
##
